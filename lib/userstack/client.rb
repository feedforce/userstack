# frozen_string_literal: true

require 'cgi'
require 'json'
require 'net/https'

module Userstack
  # A class which wraps calls to Userstack API
  class Client
    # @param access_key [String] Userstack Access key
    # @raise [ArgumentError] when `access_key` is invalid
    # @see https://userstack.com/documentation
    def initialize(access_key)
      raise ArgumentError, 'Invalid Access key' if access_key.empty?

      @access_key = access_key.freeze
      freeze
    end

    # @return [String] Returns the Access key
    attr_reader :access_key

    # Parse an useragent using Userstack
    #
    # @param useragent [String] an useragent
    # @return [Hash] a Hash generated by parsing the JSON returned
    #   from the API call, just `{}` on parsing failure
    def parse(useragent)
      response = request(useragent)
      parse_as_json(response.body)
    end

    USERSTACK_API_FQDN = URI('https://api.userstack.com/')
    private_constant :USERSTACK_API_FQDN

    USER_AGENT = 'Userstack gem/%s' % VERSION
    private_constant :USER_AGENT

    private

    def request(useragent)
      uri = request_uri(useragent)
      Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
        http.get(uri.to_s, 'User-Agent' => USER_AGENT)
      end
    end

    def request_uri(useragent)
      USERSTACK_API_FQDN.dup.tap do |uri|
        uri.path = '/detect'
        uri.query = {
          access_key: access_key,
          ua: CGI.escape(useragent)
        }.map { |k, v| "#{k}=#{v}" }.join('&')
      end
    end

    def parse_as_json(json_text)
      json_text ||= '{}'
      JSON.parse(json_text)
    rescue JSON::ParserError
      {}
    end
  end
end
